version: 2.1
commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment:- <<parameters.workflow_id>> "
            aws s3 rm --recursive s3://udapeople-prod-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-prod-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name frontend-prod-<<parameters.workflow_id>>
  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules
      - run: cd frontend && npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist
      - run: cd backend && npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: cd frontend && npm i
      - run: cd frontend && npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: cd backend && npm i
      - run: cd backend && npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: cd frontend && npm i
      - run: cd frontend && npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: cd backend && npm i
      - run: cd backend && npm audit fix --audit-level=critical --force
      # - run: npm audit --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              URLS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              echo "URLS=$URLS"
              echo "${CIRCLE_WORKFLOW_ID:0:7}"
              curl -H "Content-Type: text/plain" -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request PUT --data "$URLS" https://api.memstash.io/values/backend
      - run:
          name: Set up inventory file
          command: |
              cd .circleci/ansible
              echo "[web]" > inventory.txt
              URLS=$(curl -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request GET https://api.memstash.io/values/backend)
              echo "$URLS" >> inventory.txt
              cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - .circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      - BASH_ENV: /etc/profile
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["0b:3e:78:c0:25:c6:31:c1:02:76:73:66:84:20:7d:df"]
      

      # - run:
      #     name: Set up inventory file
      #     command: |
      #       cd .circleci/ansible
      #       echo "[web]" > inventory.txt
      #       URLS=$(curl -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request GET https://api.memstash.io/values/backend)
      #       echo "$URLS" >> inventory.txt
      #       cat inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
            -i .circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml
            pwd
            cat ~/project/backend/.env
      - persist_to_workspace:
          root: ~/project/
          paths:
            - backend/.env

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - attach_workspace:
          at: ~/project/
      - run:
          name: awscli install
          command: |
            echo "first run"
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat ~/project/backend/.env
            echo "second run1"
            cd backend
            ls
            echo "second run2"
            npm i
            echo "second run3"
            echo "second run4"
            npm run build
            echo "second run5"
            npm run migrations > migration.log
            echo "second run66"
            cat migration.log
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request GET https://api.memstash.io/values/backend)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo $API_URL
      - run:
          name: Build frontend
          command: |
            npm install webpack-dev-server -g
            cd frontend
            ls -la
            cat .env
            npm install
            npm run build
      # - aws-cli/setup
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:3e:78:c0:25:c6:31:c1:02:76:73:66:84:20:7d:df"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs rsync npm ansible tar zip
            pip install awscli
      - restore_cache:
          keys: 
            - backend-dist
      # - run:
      #     name: Build backend app
      #     command: |
      #       cd backend
      #       npm i
      #       npm run build
      #       cd dist
      #       ls
      #       cp ../package.json .
      #       zip -rq dist.zip *
      #       mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
      #       mv dist.zip ~/project/.circleci/ansible/roles/deploy/files/
      #     # command: |
      #     #   cd backend
      #     #   npm i
      #     #   tar czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: Deploy backend 2
          command: |
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            cp /home/circleci/project/backend/dist ~/project/.circleci/ansible/roles/deploy/files/ .
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-east-1.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # - run:
      #     name: Install AWS CLI for rollback
      #     when: on_fail
      #     command: |
      #       apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations
  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            apk add --update curl
      - run:
          name: Save old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cf" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
            
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations   

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\'WorkflowID\'].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: ${OldWorkflowID}"
            if [ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi     

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-backend-infrastructure:
          requires: [scan-backend]
      #     # filters:
      #     #   branches:
      #     #     only: [test-feature-branch]
      - deploy-frontend-infrastructure:
          requires: [scan-frontend]
      - configure-infrastructure:
          requires: [deploy-backend-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

