version: 2.1
commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name backend-prod-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name frontend-prod-<<parameters.workflow_id>>
  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules
      - run: cd frontend && npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - save_cache:
          paths: 
            - backend/node_modules
          key: backend-build
      - run: cd backend && npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: cd frontend && npm i
      - run: cd frontend && npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: cd backend && npm i
      - run: cd backend && npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: cd frontend && npm i
      - run: cd frontend && npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: cd backend && npm i
      - run: cd backend && npm audit fix --audit-level=critical --force
      # - run: npm audit --audit-level=critical
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
  deploy-backend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name backend-prod-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              URLS=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              echo "URLS=$URLS"
              echo "${CIRCLE_WORKFLOW_ID:0:7}"
              curl -H "Content-Type: text/plain" -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request PUT --data "$URLS" https://api.memstash.io/values/backend

      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - .circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["0b:3e:78:c0:25:c6:31:c1:02:76:73:66:84:20:7d:df"]
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            URLS=$(curl -H "token: c3f3acdb-1fb7-40ec-b5d4-bf7df509ffe8" --request GET https://api.memstash.io/values/backend)
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            echo PWD $(pwd)
            echo $TYPEORM_HOST
            touch ~/project/backend/.env
            #ls -la ~/project/backend
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo ~/project/backend/.env
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
            -i .circleci/ansible/inventory.txt \
            .circleci/ansible/configure-server.yml
            pwd
            cat ~/project/backend/.env
      - persist_to_workspace:
          root: ~/project/
          paths:
            - backend/.env

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - attach_workspace:
          at: ~/project/
      - run:
          name: awscli install
          command: |
            echo "first run"
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            echo "second run1"
            cd backend
            echo "second run2"
            npm i
            echo "second run3"
            npm audit fix --audit-level=critical --force
            echo "second run4"
            npm run build
            echo "second run5"
            npm run migrations > migration.log
            echo "second run6"
            cat migration.log
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations
  # deploy_backend_artifact:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl nodejs npm ansible zip
  #           pip install awscli
  #     - run:
  #         name: Build backend app
  #         command: |
  #           cd ~/project/backend
  #           npm i
  #           npm run build
  #           cd dist
  #           cp ../package.json .
  #           zip -rq dist.zip *
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy_backend/files/
  #           mv dist.zip ~/project/.circleci/ansible/roles/deploy_backend/files/
  #     - add_ssh_keys:
  #         fingerprints: [ "19:e6:f9:04:54:82:e1:8e:cd:31:ad:c8:64:c9:c5:20" ]
  #     - run:
  #         name: Setup EC2 instance & copy compiled backend to the EC2 instance
  #         command: |
  #           ls ~/project/.circleci/ansible/roles/deploy_backend/files/
  #           cd ~/project/backend
  #           ansible-galaxy install weareinteractive.environment
  #           ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
  #     - destroy_environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - undo_migrations



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-backend-infrastructure:
          requires: [scan-backend]
      #     # filters:
      #     #   branches:
      #     #     only: [test-feature-branch]
      - deploy-frontend-infrastructure:
          requires: [scan-frontend]
      - configure-infrastructure:
          requires: [deploy-backend-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]